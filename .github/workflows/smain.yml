# ===============================================================
# GitHub Actions Workflow for Compiling mcMMO-Classic
# ===============================================================

# 1. Workflow 的名称
name: Build mcMMO Plugin

# 2. 触发工作流的事件
on:
  # 允许你手动在 Actions 页面点击按钮来运行这个工作流
  workflow_dispatch:

  # 每次向 main 分支推送代码时自动运行 (可选，如果你想修改代码后自动编译)
  # push:
  #   branches: [ "main" ]

# 3. 定义工作流要执行的任务 (Jobs)
jobs:
  # 我们定义一个名为 "build" 的任务
  build:
    # 指定运行这个任务的虚拟机环境，使用最新的 Ubuntu
    runs-on: ubuntu-latest

    # 定义任务中的步骤 (Steps)
    steps:
      # 步骤 1: 检出代码
      # 这个 action 会把你的仓库代码下载到虚拟机里
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Java 环境
      # mcMMO 1.x 需要使用 Java 8 来编译
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin' # 使用 Eclipse Temurin (Adoptium)
          cache: 'maven'         # 缓存 Maven 依赖，加快后续编译速度

      # 步骤 3: 编译项目
      # 使用 Maven 来执行编译打包命令
      - name: Build with Maven
        # 运行 `mvn clean package` 命令。
        # `-B` 是批处理模式，`-DskipTests` 是跳过测试，可以加快编译速度。
        run: mvn -B clean package -DskipTests

      # 步骤 4: 上传构建产物 (Artifacts)
      # 将编译好的 .jar 文件保存为可供下载的构建产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # 构建产物的名称，可以自定义
          name: mcMMO-Classic-JAR
          # 要上传的文件的路径。
          # mcMMO 的输出文件位于 target/ 目录下。
          path: target/mcMMO-*.jar
